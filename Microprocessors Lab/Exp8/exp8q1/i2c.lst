C51 COMPILER V9.52.0.0   I2C                                                               09/25/2014 14:12:24 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN Z:\home\aloo\Documents\Acads\Sem5\EE337 Microprocessors Lab\Exp8\exp8q1\i2c.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe Z:\home\aloo\Documents\Acads\Sem5\EE337 Microprocessors Lab\Exp8\exp8q1\i2c
                    -.c BROWSE DEBUG OBJECTEXTEND PRINT(.\i2c.lst) TABS(2) OBJECT(Z:\home\aloo\Documents\Acads\Sem5\EE337 Microprocessors Lab
                    -\Exp8\exp8q1\i2c.obj)

line level    source

   1          #include <regx51.h>
   2          #include "i2c.h"
   3          
   4          bit b_TWI_busy=0;
   5          uchar TWI_data;
   6          uchar rw=0;                                     // 0 for write, 1 for read
   7          uchar slave_adr;
   8          
   9          void i2c_init() {
  10   1        SSCON|=0x40;                                // Enable TWI
  11   1        EA=1;                                         // interrupt enable
  12   1        IEN1|=0x02;                                 // enable TWI interrupt
  13   1      }
  14          
  15          void i2c_send(uchar dat, uchar address) {
  16   1        if(!b_TWI_busy && ((SSCON&0x10)!=0x10)) {     // if the TWI is free
  17   2          b_TWI_busy=1;                               // flag busy =1
  18   2          TWI_data=dat;                               // data example to send
  19   2          slave_adr=address;                          // slave adresse example
  20   2          rw=0;                                       // 0=write
  21   2          SSDAT=0x00;                               // clear buffer before sending data
  22   2          SSCON|=0x20;                              // TWI start sending
  23   2        }
  24   1      }
  25          
  26          void i2c_recieve() {
  27   1        
  28   1      }
  29          
  30          void it_TWI(void) interrupt 8 using 1 {
  31   1        switch(SSCS) {                    /* TWI status tasking */
  32   2          case(0x00):                /* A start condition has been sent */
  33   2          {                          /* SLR+R/W are transmitted, ACK bit received */
  34   3            b_TWI_busy=0;             /* TWI is free */
  35   3            break;
  36   3          }
  37   2      
  38   2          case(0x08):                /* A start condition has been sent */
  39   2          {                          /* SLR+R/W are transmitted, ACK bit received */
  40   3            SSCON &= ~0x20;            /* clear start condition */
  41   3            SSDAT = (slave_adr<<1)|rw; /* send slave adress and read/write bit */
  42   3            SSCON |= 0x04;             /* set AA */
  43   3            break;
  44   3          }
  45   2      
  46   2          case(0x10):                /* A repeated start condition has been sent */
  47   2          {                          /* SLR+R/W are transmitted, ACK bit received */
  48   3            SSCON &= ~0x20;            /* clear start condition */
  49   3            SSDAT = (slave_adr<<1)|rw; /* send slave adress and read/write bit */
  50   3            SSCON |= 0x04;             /* set AA */
  51   3            break;
  52   3          }
  53   2      
C51 COMPILER V9.52.0.0   I2C                                                               09/25/2014 14:12:24 PAGE 2   

  54   2          case(0x18):                /* SLR+W was transmitted, ACK bit received */
  55   2          {
  56   3            SSDAT = TWI_data;          /* Transmit data byte, ACK bit received */
  57   3            SSCON |= 0x04;             /* set AA */
  58   3            break;
  59   3          }
  60   2      
  61   2          case(0x20):                /* SLR+W was transmitted, NOT ACK bit received */
  62   2          {
  63   3            SSCON |= 0x10;             /* Transmit STOP */
  64   3            b_TWI_busy=0;              /* TWI is free */
  65   3            break;
  66   3          }
  67   2      
  68   2          case(0x28):                /* DATA was transmitted, ACK bit received */
  69   2          {
  70   3            SSCON |= 0x10;             /* send STOP */
  71   3            b_TWI_busy=0;              /* TWI is free */
  72   3            break;
  73   3          }
  74   2      
  75   2          case(0x30):                /* DATA was transmitted, NOT ACK bit received */
  76   2          {
  77   3            SSCON |= 0x10;             /* Transmit STOP */
  78   3            b_TWI_busy=0;              /* TWI is free */
  79   3            break;
  80   3          }
  81   2      
  82   2          case(0x38):                /* Arbitration lost in SLA+W or DATA.  */
  83   2          {
  84   3            SSCON |= 0x10;             /* Transmit STOP */
  85   3            b_TWI_busy=0;              /* TWI is free */
  86   3            break;
  87   3          }
  88   2        }
  89   1        SSCON &= ~0x08;                  /* clear flag */
  90   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    115    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
